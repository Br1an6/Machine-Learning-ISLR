coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Auto$mpg[test]-pred)^2) }
val.errors
set.seed(1)
train=sample(c(TRUE,FALSE),nrow(Auto),replace=TRUE)
test=(!train)
Auto$origin=factor(Auto$origin)
regfit.best=regsubsets(mpg~.-name,data=Auto[train,],nvmax=7)
test.mat=model.matrix(mpg~.-name,data=Auto[test,])
val.errors=rep(NA,7)
for(i in 1:7){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Auto$mpg[test]-pred)^2) }
val.errors
reg.best=regsubsets(mpg~.-name,data=Auto,nvmax=7)
coef(reg.best,6)
regfit.best=regsubsets(mpg~.-name,data=Auto,nvmax=7)
coef(regfit.best,7)
set.seed(1)
train=sample(c(TRUE,FALSE),nrow(Auto),replace=TRUE)
test=(!train)
Auto$origin=factor(Auto$origin)
regfit.best=regsubsets(mpg~.-name,data=Auto[train,],nvmax=7)
test.mat=model.matrix(mpg~.-name,data=Auto[test,])
val.errors=rep(NA,7)
for(i in 1:7){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Auto$mpg[test]-pred)^2) }
val.errors
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
cv.errors=matrix(NA,k,7,dimnames = list(NULL, paste(1:7)))
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars=names(coefi)
mat[, names(coefi)] %*% coefi
}
for(j in 1:k){
best.fit=regsubsets(mpg~.-name,data = Auto[folds!=j,],nvmax = 7)
for (i in 1:7) {
pred=predict(best.fit,Auto[folds==j,],id=i)
cv.errors[j,i]=mean((Auto$mpg[folds==j]-pred))
}
}
mean.cv.errors=apply(cv.errors,2,mean)
par(mfrow=c(1,1))
mean.cv.errors
LoadLibraries = function (){
# load libraries
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
Auto$origin <- factor(Auto$origin)
regfit.full = regsubsets(mpg~.-name, data = Auto)
summary(regfit.full)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
regfit.summary$adjr2[7]
# b. coefficients
coefficients(regfit.full, id = 7)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20, type = "l")
points(7, regfit.summary$adjr2[7], pch = 4, col = "red", lwd = 7)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, method ="forward")
summary(regfit.fwd)
regfitFWD.summary = summary(regfit.fwd)
which.max(regfitFWD.summary$adjr2)
regfitFWD.summary$adjr2[7]
# b. coefficients
coefficients(regfit.fwd, id = 7)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfitFWD.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20, type = "l")
points(7, regfitFWD.summary$adjr2[7], pch = 4, col = "red", lwd = 7)
regfit.bwd=regsubsets(mpg~.-name, data = Auto, method ="backward")
summary(regfit.bwd)
regfitBWD.summary = summary(regfit.bwd)
which.max(regfitBWD.summary$adjr2)
regfitBWD.summary$adjr2[7]
# b. coefficients
coefficients(regfit.bwd, id = 7)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfitBWD.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20, type = "l")
points(7, regfitBWD.summary$adjr2[7], pch = 4, col = "red", lwd = 7)
set.seed(1)
train=sample(c(TRUE,FALSE),nrow(Auto),replace=TRUE)
test=(!train)
Auto$origin=factor(Auto$origin)
regfit.best=regsubsets(mpg~.-name,data=Auto[train,],nvmax=7)
test.mat=model.matrix(mpg~.-name,data=Auto[test,])
val.errors=rep(NA,7)
for(i in 1:7){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Auto$mpg[test]-pred)^2) }
val.errors
# Plot the validation error as a function of k, the number of features.
plot(val.errors,xlab = "Number of predictors",ylab = "valdation error",pch=20,type = "b")
# Show the coefficients.
which.min(val.errors)
coef(regfit.best,7)
regfit.best=regsubsets(mpg~.-name,data=Auto,nvmax=7)
coef(regfit.best,7)
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
cv.errors=matrix(NA,k,7,dimnames = list(NULL, paste(1:7)))
predict.regsubsets = function(object, newdata, id, ...) {
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id = id)
xvars=names(coefi)
mat[, names(coefi)] %*% coefi
}
for(j in 1:k){
best.fit=regsubsets(mpg~.-name,data = Auto[folds!=j,],nvmax = 7)
for (i in 1:7) {
pred=predict(best.fit,Auto[folds==j,],id=i)
cv.errors[j,i]=mean((Auto$mpg[folds==j]-pred))
}
}
mean.cv.errors=apply(cv.errors,2,mean)
par(mfrow=c(1,1))
mean.cv.errors
# Plot the validation error as a function of k, the number of features.
par(mfrow=c(1,1))
plot(mean.cv.errors,xlab="Number of features",type='b')
# Show the coefficients.
coef(best.fit,6)
reg.best=regsubsets(mpg~.-name,data=Auto,nvmax=7)
coef(reg.best,6)
Auto$origin <- factor(Auto$origin)
LoadLibraries = function (){
# load libraries
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
Auto$origin <- factor(Auto$origin)
regfit.full = regsubsets(mpg~.-name, data = Auto, nvmax=7)
summary(regfit.full)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, nvmax=7, method ="forward")
summary(regfit.fwd)
regfitFWD.summary = summary(regfit.fwd)
which.max(regfitFWD.summary$adjr2)
regfit.bwd=regsubsets(mpg~.-name, data = Auto, nvmax=7, method ="backward")
summary(regfit.bwd)
regfitBWD.summary = summary(regfit.bwd)
which.max(regfitBWD.summary$adjr2)
regfitBWD.summary$adjr2[7]
# b. coefficients
coefficients(regfit.bwd, id = 7)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfitBWD.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20, type = "l")
points(7, regfitBWD.summary$adjr2[7], pch = 4, col = "red", lwd = 7)
LoadLibraries = function (){
# load libraries
library(ISLR)
print("The libraries have been loaded .")
}
LoadLibraries()
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
print("The libraries have been loaded .")
}
LoadLibraries()
install.packages("glint")
library(glmnet)
install.packages("glmnet")
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
print("The libraries have been loaded .")
}
LoadLibraries()
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(-name,mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(Auto$-.name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(Auto$.-name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.Auto$-name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
# grid=10^seq(10,0,length=100)
# ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
x
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
summary(ridge.mod)
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
plot(ridge.mod)
best.lambda = ridge.mod$lambda.min
best.lambda = ridge.mod$lambda.min
best.lambda
ridge.mod$lambda
ridge.mod$lambda.min
ridge.mod$lambda.max
x
summary(x)
summary(ridge.mod)
fix(ridge.mod)
mod.ridge$lambda.min
best.lambda = ridge.mod$lambda.min
best.lambda
coef(ridge.mod)
coef(ridge.mod)[0]
coef(ridge.mod)[1]
coef(ridge.mod)[2]
coef(ridge.mod)[s0]
library(Matrix)
best.lambda = ridge.mod$lambda.min
best.lambda
library(glmnet)
library(lattice)
ridge.mod$lambda.min
dim(coef(ridge.mod))
names(ridge.mod)
ridge.mod$lambda
which.min(ridge.mod$lambda)
which.max(ridge.mod$lambda)
ridge.mod$lambda [50
]
ridge.mod$lambda[50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
print("The libraries have been loaded .")
}
LoadLibraries()
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
plot(ridge.mod)
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=cv.glmnet(x,y,alpha=0,lambda=grid)
best.lambda = ridge.mod$lambda.1se
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
plot(ridge.mod)
best.lambda = ridge.mod$lambda.1se
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=cv.glmnet(x,y,alpha=0,lambda=grid)
plot(ridge.mod)
ridge.mode$lambda
ridge.mod$lambda
ridge.mod$lambda[0]
ridge.mod$lambda [100]
ridge.mod$lambda [99]
best.lambda = ridge.mod$lambda.min
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
best.lambda = ridge.mod$lambda.1se
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
lasso.mod=cv.glmnet(x,y,alpha=1,lambda=grid)
plot(ridge.mod)
best.lambda = lasso.mod$lambda.1se
best.lambda
lasso.pred = predict(lasso.mod, newx=x, s=best.lambda)
lasso.mse = mean((y - lasso.pred)^2)
lasso.mse
install.packages("jpeg")
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
lasso.mod=cv.glmnet(x,y,alpha=1,lambda=grid)
plot(ridge.mod)
library(jpeg)
vcat <- readJPEG('cat.jpg')
cat <- readJPEG('cat.jpg')
ncol(cat)
nrow(cat)
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
plot(cumsum(cat.r.pca$sdev)/sum(ca t.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('./compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
plot(cumsum(cat.r.pca$sdev)/sum(ca t.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
original <- file.info('cat.jpg')$size / 1000
imgs <- dir('compressed/')
for (i in imgs) {
full.path <- paste('compressed/', i, sep='')
print(paste(i, ' size: ', file.info(full.path)$size / 1000, ' original: ', original, ' % diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)
plot(cumsum(cat.r.pca$sdev)/sum(ca t.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
plot(cumsum(cat.r.pca$sdev)/sum(cat.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
}
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pc
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
