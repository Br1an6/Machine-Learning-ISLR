mydata$y = mydata$x1 + rnorm(nrow(mydata), 0, 1);
alpha = 0.064;
B0 = 0;
B1 = 0;
nIter = 10;
errorList = NULL; # keep track of the error values
# make a plot of the data and the various canonical solutions
par(mfrow=c(1, 1));
plot(mydata, xlim = c(-1, 6), ylim = c(-1, 6))
abline(0, 1, lty = 2); # y = x
abline(a = B0, b = B1, lty = 2); # y = 0
# run gradient descent for nIter iterations
for(i in 1:nIter) {
error = computeCost(B0, B1, mydata);
errorList = c(errorList, error);
#  if((i - 1) %% 10 == 0) {
abline(a = B0, b = B1); # draw a line indicating the current solution
#  }
print(paste("Error", round(error, 2), "B0", round(B0, 2), "B1", round(B1, 2)));
newB0 = updateB0(B0, B1, alpha, mydata);
newB1 = updateB1(B0, B1, alpha, mydata);
B0 = newB0;
B1 = newB1;
}
# Q:  what happens if we have a lot more iterations?
# Q:  what happens if we have "the wrong" alpha?
#####################################
# solve using lm
# create a plot comparing with lm solution
mylm = lm(y ~ x1, data = mydata);
summary(mylm);
abline(mylm, lty = 2, lwd = 5);
set.seed(1);
mydata = data.frame(x1 = c(1, 2, 3, 4, 5));
mydata$y = mydata$x1 + rnorm(nrow(mydata), 0, 1);
alpha = 0.128;
B0 = 0;
B1 = 0;
nIter = 10;
errorList = NULL; # keep track of the error values
# make a plot of the data and the various canonical solutions
par(mfrow=c(1, 1));
plot(mydata, xlim = c(-1, 6), ylim = c(-1, 6))
abline(0, 1, lty = 2); # y = x
abline(a = B0, b = B1, lty = 2); # y = 0
# run gradient descent for nIter iterations
for(i in 1:nIter) {
error = computeCost(B0, B1, mydata);
errorList = c(errorList, error);
#  if((i - 1) %% 10 == 0) {
abline(a = B0, b = B1); # draw a line indicating the current solution
#  }
print(paste("Error", round(error, 2), "B0", round(B0, 2), "B1", round(B1, 2)));
newB0 = updateB0(B0, B1, alpha, mydata);
newB1 = updateB1(B0, B1, alpha, mydata);
B0 = newB0;
B1 = newB1;
}
# Q:  what happens if we have a lot more iterations?
# Q:  what happens if we have "the wrong" alpha?
#####################################
# solve using lm
# create a plot comparing with lm solution
mylm = lm(y ~ x1, data = mydata);
summary(mylm);
abline(mylm, lty = 2, lwd = 5);
set.seed(1);
mydata = data.frame(x1 = c(1, 2, 3, 4, 5));
mydata$y = mydata$x1 + rnorm(nrow(mydata), 0, 1);
alpha = 1;
B0 = 0;
B1 = 0;
nIter = 10;
errorList = NULL; # keep track of the error values
# make a plot of the data and the various canonical solutions
par(mfrow=c(1, 1));
plot(mydata, xlim = c(-1, 6), ylim = c(-1, 6))
abline(0, 1, lty = 2); # y = x
abline(a = B0, b = B1, lty = 2); # y = 0
# run gradient descent for nIter iterations
for(i in 1:nIter) {
error = computeCost(B0, B1, mydata);
errorList = c(errorList, error);
#  if((i - 1) %% 10 == 0) {
abline(a = B0, b = B1); # draw a line indicating the current solution
#  }
print(paste("Error", round(error, 2), "B0", round(B0, 2), "B1", round(B1, 2)));
newB0 = updateB0(B0, B1, alpha, mydata);
newB1 = updateB1(B0, B1, alpha, mydata);
B0 = newB0;
B1 = newB1;
}
# Q:  what happens if we have a lot more iterations?
# Q:  what happens if we have "the wrong" alpha?
#####################################
# solve using lm
# create a plot comparing with lm solution
mylm = lm(y ~ x1, data = mydata);
summary(mylm);
abline(mylm, lty = 2, lwd = 5);
library(advertising)
summary(advertising)
library(ISLR)
library(MASS)
summary(advertising)
names(Carseats )
lm.fit =lm(Sales ~ TV + Radio + Newspaper ,data=mydata)
summary(Carseats)
summary(Advertising)
library(ISLR)
summary(Advertising)
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
summary(ISLR
)
summary(ISLR)
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
summary(Advertising)
lm.fit =lm(Sales ~ TV + Radio + Newspaper ,data=Advertising)
lm.fit =lm(sales ~ TV + radio + newspaper ,data=Advertising)
summary(lm.fit)
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
# update of the Y-intercept, beta0
updateB0 = function(B0, B1, alpha, mydata) {
n = nrow(mydata);
newB0 = B0 - alpha * (1/n) * sum( B0 + B1 * mydata$x1 - mydata$y);
return(newB0);
}
# update of the predictor coefficient, beta1
updateB1 = function(B0, B1, alpha, mydata) {
n = nrow(mydata);
newB1 = B1 - alpha * (1/n) * sum( (B0 + B1 * mydata$x1 - mydata$y) * mydata$x1);
return(newB1);
}
set.seed(1);
mydata = Advertising;
mydata$Sales = mydata$TV + rnorm(nrow(mydata), 0, 1);
alpha = 1;
B0 = 0;
B1 = 0;
nIter = 1000;
errorList = NULL;
par(mfrow=c(1, 1));
plot(mydata, xlim = c(-1, 6), ylim = c(-1, 6))
abline(0, 1, lty = 2); # y = x
abline(a = B0, b = B1, lty = 2); # y = 0
for(i in 1:nIter) {
error = computeCost(B0, B1, mydata);
errorList = c(errorList, error);
abline(a = B0, b = B1);
print(paste("Error", round(error, 2), "B0", round(B0, 2), "B1", round(B1, 2)));
newB0 = updateB0(B0, B1, alpha, mydata);
newB1 = updateB1(B0, B1, alpha, mydata);
B0 = newB0;
B1 = newB1;
}
mylm = lm(y ~ x1, data = mydata);
summary(mylm);
abline(mylm, lty = 2, lwd = 5);
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
# update of the Y-intercept, beta0
updateB0 = function(B0, B1, alpha, mydata) {
n = nrow(mydata);
newB0 = B0 - alpha * (1/n) * sum( B0 + B1 * mydata$x1 - mydata$y);
return(newB0);
}
# update of the predictor coefficient, beta1
updateB1 = function(B0, B1, alpha, mydata) {
n = nrow(mydata);
newB1 = B1 - alpha * (1/n) * sum( (B0 + B1 * mydata$x1 - mydata$y) * mydata$x1);
return(newB1);
}
set.seed(1);
mydata = Advertising;
mydata$Sales = mydata$TV + rnorm(nrow(mydata), 0, 1);
alpha = 0.16;
B0 = 0;
B1 = 0;
nIter = 1000;
errorList = NULL;
par(mfrow=c(1, 1));
plot(mydata, xlim = c(-1, 6), ylim = c(-1, 6))
abline(0, 1, lty = 2); # y = x
abline(a = B0, b = B1, lty = 2); # y = 0
for(i in 1:nIter) {
error = computeCost(B0, B1, mydata);
errorList = c(errorList, error);
abline(a = B0, b = B1);
print(paste("Error", round(error, 2), "B0", round(B0, 2), "B1", round(B1, 2)));
newB0 = updateB0(B0, B1, alpha, mydata);
newB1 = updateB1(B0, B1, alpha, mydata);
B0 = newB0;
B1 = newB1;
}
mylm = lm(y ~ x1, data = mydata);
summary(mylm);
abline(mylm, lty = 2, lwd = 5);
library(ISRL)
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("ISLR")
summary(advertisy)
summary(advertising)
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
summary(Advertising)
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
fix(Advertising)
Advertising.knn<- knn.reg(Advertising$TV, y=Advertising$Sales, k=1)
library(class)
train.X= cbind(train$displacement,train$horsepower,train$weight,train$acceleration)
library(class)
train.X= cbind(train$displacement,train$horsepower,train$weight,train$acceleration)
library(class)
train.X= cbind(train$displacement,train$horsepower,train$weight,train$acceleration)
rmse()
RMSE()
summary(Advertising)
LoadLibraries = function (){
library(ISLR)
library(MASS)
print("The libraries have been loaded .")
}
LoadLibraries()
Advertising=read.csv ("Advertising.csv", header =T,na.strings ="?")
lm.fit =lm(Sales~TV + Radio + Newspaper, data = Advertising)
summary(Advertising)
lm.fit =lm(sales~TV + radio + newspaper, data = Advertising)
summary(lm.fit)
library(ISLR)
names(Hitters)
fix(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
fix(Hitters)
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
library(leaps)
install.packages("leaps")
library(leaps)
regfit.full=regsubsets(Salary∼.,Hitters)
regfit.full=regsubsets(Hitters$Salary∼.,Hitters$Hitters)
regfit.full=regsubsets(Hitters$Salary~.,Hitters$Hitters)
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
regfit.full=regsubsets(Salary∼.,data=Hitters ,nvmax=19)
regfit.full=regsubsets(Salary~.,data=Hitters ,nvmax=19)
reg.summary=summary(regfit.full)
reg.summary
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS",
type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ",
ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type=’l’)
plot(reg.summary$cp ,xlab="Number of Variables ",ylab="Cp", type='l')
points(10,reg.summary$cp [10],col="red",cex=2,pch=20)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type=’l’)
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type='l)
/
.
..
))))
''
''
''
plot(reg.summary$bic ,xlab="Number of Variables ",ylab="BIC",
type='l')
points(6,reg.summary$bic [6],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full ,6)
regfit.fwd=regsubsets(Salary∼.,data=Hitters,nvmax=19, method =" forward ")
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method =" forward ")
library(leaps)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method =" forward ")
library(ISLR)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method =" forward ")
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method ="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(Salary~.,data=Hitters,nvmax=19, method ="backward")
summary(regfit.bwd)
set . seed (1)
set.seed (1)
train=sample(c(TRUE,FALSE), nrow(Hitters),rep=TRUE)
test =(! train )
test =(!train)
regfit.best=regsubsets(Salary~.,data=Hitters[train,], nvmax =19)
test.mat=model.matrix(Salary~.,data=Hitters[test,])
val.errors=rep(NA,19)
for(i in 1:19){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[test]-pred)^2) }
for(i in 1:19){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
LoadLibraries = function (){
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
regfit.full = regsubsets(mpg~.-nam, data = Auto, nvmax = 10)
regfit.summary = summary(regfit.full)
which.max(regfit.summary$adjr2)
plot(regfit.summary$adjr2, xlab = "Subset Size", ylab = "Adjusted R2", pch = 20,
type = "l")
points(3, regfit.summary$adjr2[3], pch = 4, col = "red", lwd = 7)
coefficients(mod.full, id = 3)
LoadLibraries = function (){
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
regfit.full = regsubsets(mpg~.-nam, data = Auto, nvmax = 10)
regfit.summary = summary(regfit.full)
which.max(regfit.summary$adjr2)
coefficients(regfit.full, id = 3)
plot(regfit.summary$adjr2, xlab = "Subset Size", ylab = "Adjusted R2", pch = 20,
type = "l")
points(3, regfit.summary$adjr2[3], pch = 4, col = "red", lwd = 7)
LoadLibraries = function (){
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
regfit.full = regsubsets(mpg~.-name, data = Auto, nvmax = 10)
regfit.summary = summary(regfit.full)
which.max(regfit.summary$adjr2)
coefficients(regfit.full, id = 3)
plot(regfit.summary$adjr2, xlab = "Subset Size", ylab = "Adjusted R2", pch = 20,
type = "l")
points(3, regfit.summary$adjr2[3], pch = 4, col = "red", lwd = 7)
summary(regfit.full)
coefficients(regfit.full, id = 6)
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(3, regfit.summary$adjr2[3], pch = 4, col = "red", lwd = 7)
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(3, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(3, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(6, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
regfit.summary$adjr2
nrow(Auto)
ncol(Auto)
LoadLibraries = function (){
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
regfit.full = regsubsets(mpg~.-name, data = Auto, nvmax = 7)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
# b. coefficients
coefficients(regfit.full, id = 6)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(6, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
LoadLibraries = function (){
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
regfit.full = regsubsets(mpg~.-name, data = Auto)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
# b. coefficients
coefficients(regfit.full, id = 6)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(6, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, method ="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(mpg~.-name, data = Auto, method ="backward")
summary(regfit.bwd)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, method ="forward")
summary(regfit.fwd)
which.max(regfit.fwd$adjr2)
regfit.bwd=regsubsets(mpg~.-name, data = Auto, method ="backward")
summary(regfit.bwd)
which.max(regfit.bwd$adjr2)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, method ="forward")
summary(regfit.fwd)
regfitFWD.summary = summary(regfit.fwd)
which.max(regfitFWD.summary$adjr2)
regfit.bwd=regsubsets(mpg~.-name, data = Auto, method ="backward")
regfitBWD.summary = summary(regfit.bwd)
which.max(regfitBWD.summary$adjr2)
LoadLibraries = function (){
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
regfit.full = regsubsets(mpg~.-name, data = Auto)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
# b. coefficients
coefficients(regfit.full, id = 6)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(6, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, method ="forward")
summary(regfit.fwd)
regfitFWD.summary = summary(regfit.fwd)
which.max(regfitFWD.summary$adjr2)
coefficients(regfit.fwd, id = 6)
regfit.bwd=regsubsets(mpg~.-name, data = Auto, method ="backward")
regfitBWD.summary = summary(regfit.bwd)
which.max(regfitBWD.summary$adjr2)
coefficients(regfit.bwd, id = 6)
regfit.summary$adjr2[6]
regfit.summary$adjr2
regfitFWD.summary$adjr2
regfitBWD.summary$adjr2
regfit.summary$adjr2[6]
regfitFWD.summary$adjr2[6]
regfitBWD.summary$adjr2[6]
LoadLibraries = function (){
# load libraries
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
regfit.full = regsubsets(mpg~.-name, data = Auto)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
regfit.summary$adjr2[6]
---
title: "Homework 5"
author: "Jiao Qu A20386614, Yuan-An Liu A20375099, Zhenyu Zhang A20287371"
output:
pdf_document: default
---
```{r setup, include=FALSE}
LoadLibraries = function (){
# load libraries
library(ISLR)
library(leaps)
print("The libraries have been loaded .")
}
LoadLibraries()
```
# 1.
## (a)
```{r}
regfit.full = regsubsets(mpg~.-name, data = Auto)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
regfit.summary$adjr2[6]
```
The best adjusted R2 is at 6th: 0.8183822
The best subset: wicylinders, displacement, horsepower, weight, year, origin
## (b)
```{r}
# b. coefficients
coefficients(regfit.full, id = 6)
```
## (c)
```{r}
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(6, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
```
regfit.full = regsubsets(mpg~.-name, data = Auto)
regfit.summary = summary(regfit.full)
# a. the best adjusted R2
which.max(regfit.summary$adjr2)
regfit.summary$adjr2[6]
# b. coefficients
coefficients(regfit.full, id = 6)
# c. Plot of the adjusted R2 as a function of number of variables
plot(regfit.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", pch = 20,
type = "l")
points(6, regfit.summary$adjr2[6], pch = 4, col = "red", lwd = 7)
regfit.fwd=regsubsets(mpg~.-name, data = Auto, method ="forward")
summary(regfit.fwd)
regfitFWD.summary = summary(regfit.fwd)
which.max(regfitFWD.summary$adjr2)
regfitFWD.summary$adjr2[6]
regfitBWD.summary$adjr2[6]
regfit.bwd=regsubsets(mpg~.-name, data = Auto, method ="backward")
regfitBWD.summary = summary(regfit.bwd)
which.max(regfitBWD.summary$adjr2)
regfitBWD.summary$adjr2[6]
