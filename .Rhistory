LoadLibraries()
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
print("The libraries have been loaded .")
}
LoadLibraries()
install.packages("glint")
library(glmnet)
install.packages("glmnet")
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
print("The libraries have been loaded .")
}
LoadLibraries()
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(-name,mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(Auto$-.name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(Auto$.-name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.Auto$-name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(.-Auto$name,Auto$mpg,alpha=0,lambda=grid)
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
# grid=10^seq(10,0,length=100)
# ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
x
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
summary(ridge.mod)
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
plot(ridge.mod)
best.lambda = ridge.mod$lambda.min
best.lambda = ridge.mod$lambda.min
best.lambda
ridge.mod$lambda
ridge.mod$lambda.min
ridge.mod$lambda.max
x
summary(x)
summary(ridge.mod)
fix(ridge.mod)
mod.ridge$lambda.min
best.lambda = ridge.mod$lambda.min
best.lambda
coef(ridge.mod)
coef(ridge.mod)[0]
coef(ridge.mod)[1]
coef(ridge.mod)[2]
coef(ridge.mod)[s0]
library(Matrix)
best.lambda = ridge.mod$lambda.min
best.lambda
library(glmnet)
library(lattice)
ridge.mod$lambda.min
dim(coef(ridge.mod))
names(ridge.mod)
ridge.mod$lambda
which.min(ridge.mod$lambda)
which.max(ridge.mod$lambda)
ridge.mod$lambda [50
]
ridge.mod$lambda[50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
ridge.mod$lambda[60]
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
print("The libraries have been loaded .")
}
LoadLibraries()
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=glmnet(x,y,alpha=0,lambda=grid)
plot(ridge.mod)
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=cv.glmnet(x,y,alpha=0,lambda=grid)
best.lambda = ridge.mod$lambda.1se
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
plot(ridge.mod)
best.lambda = ridge.mod$lambda.1se
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
ridge.mod=cv.glmnet(x,y,alpha=0,lambda=grid)
plot(ridge.mod)
ridge.mode$lambda
ridge.mod$lambda
ridge.mod$lambda[0]
ridge.mod$lambda [100]
ridge.mod$lambda [99]
best.lambda = ridge.mod$lambda.min
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
best.lambda = ridge.mod$lambda.1se
best.lambda
ridge.pred = predict(ridge.mod, newx=x, s=best.lambda)
ridge.mse = mean((y - ridge.pred)^2)
ridge.mse
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
lasso.mod=cv.glmnet(x,y,alpha=1,lambda=grid)
plot(ridge.mod)
best.lambda = lasso.mod$lambda.1se
best.lambda
lasso.pred = predict(lasso.mod, newx=x, s=best.lambda)
lasso.mse = mean((y - lasso.pred)^2)
lasso.mse
install.packages("jpeg")
Auto$origin <- factor(Auto$origin)
y = Auto$mpg
x = model.matrix(mpg~.-name,data=Auto)
grid=10^seq(10,0,length=100)
lasso.mod=cv.glmnet(x,y,alpha=1,lambda=grid)
plot(ridge.mod)
library(jpeg)
vcat <- readJPEG('cat.jpg')
cat <- readJPEG('cat.jpg')
ncol(cat)
nrow(cat)
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
plot(cumsum(cat.r.pca$sdev)/sum(ca t.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('./compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
plot(cumsum(cat.r.pca$sdev)/sum(ca t.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
original <- file.info('cat.jpg')$size / 1000
imgs <- dir('compressed/')
for (i in imgs) {
full.path <- paste('compressed/', i, sep='')
print(paste(i, ' size: ', file.info(full.path)$size / 1000, ' original: ', original, ' % diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pca)
plot(cumsum(cat.r.pca$sdev)/sum(ca t.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
plot(cumsum(cat.r.pca$sdev)/sum(cat.r.pca$sdev), ylab="pct var explained")
abline(v = c(3, 46, 89, 388))
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
}
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
library(jpeg)
cat <- readJPEG('cat.jpg')
r <- cat[,,1]
g <- cat[,,2]
b <- cat[,,3]
cat.r.pca <- prcomp(r, center = FALSE)
cat.g.pca <- prcomp(g, center = FALSE)
cat.b.pca <- prcomp(b, center = FALSE)
rgb.pca <- list(cat.r.pca, cat.g.pca, cat.b.pc
for (i in seq.int(3, round(nrow(cat) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
writeJPEG(pca.img, paste('compressed/cat_compressed_', round(i,0), '_components.jpg', sep = ''))
}
LoadLibraries = function (){
# load libraries
library(ISLR)
library(glmnet)
library(pls)
library(ggfortify)
library(cluster)
print("The libraries have been loaded .")
}
LoadLibraries()
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
grid=c(10^seq(10,-10,length=200),0,100)
cv.errors=matrix(NA,k,length(grid))
for(j in 1:k){
y = Auto$mpg
y.train = y[folds != j]
x = model.matrix(mpg~.-name,data=Auto)[,-1]
x.train = x[folds != j, ]
ridge.mod=glmnet(x.train,y.train,alpha=0,lambda=grid)
c = 1
for(i in grid){
pred=predict(ridge.mod,s = i, newx = x[folds==j,])
cv.errors[j,c]=mean((y[folds==j]-pred)^2)
c = c + 1
}
}
MSE = colMeans(cv.errors)
plot(x = log(grid), y = MSE)
grid[which(MSE == min(MSE))]
MSE[which(MSE == min(MSE))]
MSE[which(grid==0)]
MSE[which(grid==100)]
optimal=grid[which(MSE == min(MSE))]
zero=(grid==0)
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=optimal)[1:9,]
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=0)[1:9,]
out=glmnet(x,y,alpha=0)
predict(out,type="coefficients",s=100)[1:9,]
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
lam=c(10^seq(10,-10,length=200),0,100)
cv.errors=matrix(NA,k,length(grid))
for(j in 1:k){
y = Auto$mpg
y.train = y[folds != j]
x = model.matrix(mpg~.-name,data=Auto)[,-1]
x.train = x[folds != j, ]
lasso.mod=cv.glmnet(x.train,y.train,alpha=1,lambda=lam)
c = 1
for(i in grid){
pred=predict(ridge.mod,s = i, newx = x[folds==j,])
cv.errors[j,c]=mean((y[folds==j]-pred)^2)
c = c + 1
}
}
MSE = colMeans(cv.errors)
plot(x = log(lam), y = MSE)
lam[which(MSE == min(MSE))]
MSE[which(MSE == min(MSE))]
MSE[which(lam==0)]
MSE[which(lam==100)]
optimal=lam[which(MSE == min(MSE))]
out=glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=optimal)[1:9,]
out=glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=0)[1:9,]
out=glmnet(x,y,alpha=1)
predict(out,type="coefficients",s=100)[1:9,]
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
cv.errors=matrix(NA,k,8,dimnames = list(NULL, paste(1:8)))
for(j in 1:k){
pcr.fit=pcr(mpg~.-name,data=Auto[folds!=j,],scale=TRUE,validation="CV")
for(i in 1:8){
pred=predict(pcr.fit,Auto[folds==j,],ncomp=i)
cv.errors[j,i]=mean((Auto$mpg[folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors,2,mean)
plot(mean.cv.errors,type="b")
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
meanvar=matrix(NA,k,8,dimnames = list(NULL, paste(1:8)))
for(j in 1:k){
pcr.fit=pcr(mpg~.-name,data=Auto[folds!=j,],scale=TRUE,validation="CV")
for(i in 1:8){
pred=predict(pcr.fit,Auto[folds==j,],ncomp=i)
meanvar[j,i]=var(pred)
}
}
plot(apply(meanvar,2,mean),type="b")
mean.cv.errors
mean.cv.errors
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
cv.errors=matrix(NA,k,8,dimnames = list(NULL, paste(1:8)))
for(j in 1:k){
pls.fit=plsr(mpg~.-name,data=Auto[folds!=j,],scale=TRUE,validation="CV")
for(i in 1:8){
pred=predict(pls.fit,Auto[folds==j,],ncomp=i)
cv.errors[j,i]=mean((Auto$mpg[folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors,2,mean)
plot(mean.cv.errors,type="b")
k=3
set.seed(1)
Auto$origin=factor(Auto$origin)
folds=sample(1:k,nrow(Auto),replace = TRUE)
meanvar=matrix(NA,k,8,dimnames = list(NULL, paste(1:8)))
for(j in 1:k){
pls.fit=plsr(mpg~.-name,data=Auto[folds!=j,],scale=TRUE,validation="CV")
for(i in 1:8){
pred=predict(pls.fit,Auto[folds==j,],ncomp=i)
meanvar[j,i]=var(pred)
}
}
meanvar=apply(meanvar,2,mean)
plot(meanvar,type="b")
mean.cv.errors
Auto$origin=factor(Auto$origin)
df=Auto[,c(1, 2, 3, 4, 5, 6, 7)]
pca = function (x, retx = TRUE, center = TRUE, scale. = TRUE, tol = NULL,
...)
{
chkDots(...)
x=as.matrix(x)
x=scale(x, center = center, scale = scale.)
cen=attr(x, "scaled:center")
sc=attr(x, "scaled:scale")
if (any(sc == 0))
stop("cannot rescale a constant/zero column to unit variance")
s=svd(x, nu = 0)
s$d=s$d/sqrt(max(1, nrow(x) - 1))
if (!is.null(tol)) {
rank=sum(s$d > (s$d[1L] * tol))
if (rank < ncol(x)) {
s$v=s$v[, 1L:rank, drop = FALSE]
s$d=s$d[1L:rank]
}
}
dimnames(s$v)=list(colnames(x), paste0("PC", seq_len(ncol(s$v))))
r=list(sdev = s$d, rotation = s$v, center = if (is.null(cen)) FALSE else cen,
scale = if (is.null(sc)) FALSE else sc)
if (retx)
r$x=x %*% s$v
class(r)="prcomp"
r
}
df.pca = pca(df)
summary(df.pca)
autoplot(df.pca,data=df,colour = 'mpg',
loadings = TRUE,loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 7)
autoplot(fanny(df.pca$x[,1:2], 3), frame = TRUE)
library(ISLR)
library(glmnet)
library(pls)
library(ggfortify)
library(cluster)
library(pls)
